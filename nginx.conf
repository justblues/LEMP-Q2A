
#user  nobody;
worker_processes  2;
worker_cpu_affinity 01 10;
worker_rlimit_nofile 4096;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
pid /var/run/nginx/nginx.pid;


events {
    worker_connections  4096;
    multi_accept on;
    use epoll;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    sendfile        on;
    #tcp_nopush     on;
    tcp_nopush on; #防止网络阻塞
    tcp_nodelay on; #防止网络阻塞
    #keepalive_timeout  0;
    keepalive_timeout  10;
    client_header_timeout 10;
    client_body_timeout 10;
    reset_timedout_connection on;
    send_timeout 10;
    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
fastcgi_connect_timeout 300;
fastcgi_send_timeout 300;
fastcgi_read_timeout 300;
fastcgi_buffer_size 64k;
fastcgi_buffers 4 64k;
fastcgi_busy_buffers_size 128k;
fastcgi_temp_file_write_size 128k; 
    #gzip  on;
    gzip_http_version 1.0;
    gzip_min_length 1000; 
    gzip_comp_level 4; 
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; 
    upstream webservers{
        #负载均衡模块
    #   server 10.10.21.23 max_fails=3 fail_timeout=5s weight=1;
    #   server 10.10.21.133 max_fails=3 fail_timeout=5s  weight=1;
       #使同一ip定向到同一后端服务器，以共享会话session
      # ip_hash;
      # server 10.10.21.135 weight=1;
      # server 10.10.21.138 weight=1;
        server 10.10.21.135 max_fails=3 fail_timeout=5s weight=1;
        server 10.10.21.138  max_fails=3 fail_timeout=5s weight=1;
       #备用服务器，这里指本机的8080端口上 
        server 127.0.0.1:8080 backup;          
                      }
     #定义缓存路径，级别，缓存区域大小，和最大缓存大小
     proxy_cache_path /nginx/cache/first levels=1:2:1 keys_zone=a:20m max_size=1g;
   # proxy_connect_timeout 300;
   #proxy_read_timeout 300;
    #proxy_send_timeout 300;
      #对所以server都生效
    server {
        listen       80;
        server_name  localhost;
large_client_header_buffers 4 16k;
client_max_body_size 30m;
client_body_buffer_size 128k;
proxy_connect_timeout 300;
proxy_read_timeout 300;
proxy_send_timeout 300;
proxy_buffer_size 64k;
proxy_buffers   4 32k;
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        #location / {
        #    root   /web/htdocs;
        #    index  index.php index.html;
        #}
        add_header x-via $server_addr;
        #添加首部信息，是否缓存命中，在浏览器中F12可查看
        add_header x-cache $upstream_cache_status;
        

        #nginx服务器的状态
        location /nginx_status{
             stub_status on;
        }
        #error_page  404              /404.html;
	#location ~*^/forum {
	#proxy_pass http://10.10.21.133;
        #proxy_set_header X-Real-IP $remote_addr;
	#}
        
# redirect server error pages to the static page /50x.html        #

	location / {
	#proxy_pass http://10.10.21.133/;
        #将所以请求都转发到上面定义的upstream
	proxy_pass http://webservers/;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
#    proxy_connect_timeout 10;
#proxy_read_timeout 10;
#proxy_send_timeout 10;
#proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
#proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置
#proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）
#proxy_temp_file_write_size 64k;
#设定缓存文件夹大小，大于这个值，将从upstream服务器传
	proxy_cache a;
        #关闭缓存功能
    #    proxy_cache off;
    #    proxy_cache_valid 200 10m;
                   }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        location ~.*\.(gif|jpg|jpeg|png|bmp|swf|css|js)$
        {
#        root /var/www/qa-theme/Candy;
        #proxy_pass http://10.10.21.135/var/www/question2answer/qa-theme;
        proxy_pass http://10.10.21.135;
      #  if (-f $request_filename){
      #     expires 1d;
      #     break;   
      #     }
        }
        #location ~.*\.js$
        #{
        #root /var/www/qa-content;
        #proxy_pass http://10.10.21.135;
        #if (-f $request_filename){
         #  expires 1d;
         #  break;   
          # }
          #}        


# proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #   proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #所有PHP页面都转发到本地的PHP服务器上
#        location ~ \.php$ {
#	    index index.php index.html;
#            root           /web/htdocs;
#            fastcgi_pass   127.0.0.1:9000;
#            fastcgi_index  index.php;
#            fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#            include        fastcgi_params;
#        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    #错误页面
    server{
        listen 8080;
        server_name localhost;
        root /web/errorpages;
        index index.html;
          }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
